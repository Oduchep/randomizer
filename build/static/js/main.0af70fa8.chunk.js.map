{"version":3,"sources":["Randomize.jsx","App.js","serviceWorker.js","index.js"],"names":["counter","generateAnswer","id","value","Application","props","state","question","answer","possibleAnswers","handleOptionChange","bind","handleQuestionChange","handleAddOption","handleAnswer","resetState","updatedOption","this","map","option","setState","answers","numOfAnswers","length","randomAnswer","Math","floor","random","Fragment","className","style","listStyle","key","marginBottom","color","onClick","placeholder","onChange","e","target","idx","num","String","fromCharCode","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0af70fa8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./App.css\";\r\n\r\nlet counter = 1;\r\nconst generateAnswer = () => {\r\n  return { id: counter++, value: \"\" };\r\n};\r\n\r\nconst generateAlpha = (num) => String.fromCharCode(65 + num); // String.fromCharCode\r\n\r\nclass Application extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      question: \"\",\r\n      answer: null,\r\n      possibleAnswers: [generateAnswer(), generateAnswer(), generateAnswer()],\r\n    };\r\n\r\n    this.handleOptionChange = this.handleOptionChange.bind(this);\r\n    this.handleQuestionChange = this.handleQuestionChange.bind(this);\r\n    this.handleAddOption = this.handleAddOption.bind(this);\r\n    this.handleAnswer = this.handleAnswer.bind(this);\r\n    this.resetState = this.resetState.bind(this);\r\n  }\r\n\r\n  handleOptionChange(updatedOption, value) {\r\n    const possibleAnswers = this.state.possibleAnswers.map((option) => {\r\n      if (updatedOption.id === option.id) {\r\n        option = { ...option, value }; // object spread\r\n      }\r\n      return option;\r\n    });\r\n\r\n    this.setState({ possibleAnswers });\r\n  }\r\n\r\n  handleQuestionChange(question) {\r\n    // this.setState({ question: question });\r\n    this.setState({ question });\r\n  }\r\n\r\n  handleAddOption() {\r\n    const answers = this.state.possibleAnswers;\r\n    const possibleAnswers = [...answers, generateAnswer()]; // array spread\r\n    this.setState({ possibleAnswers });\r\n  }\r\n\r\n  handleAnswer() {\r\n    const { possibleAnswers } = this.state;\r\n    const numOfAnswers = possibleAnswers.length;\r\n    const randomAnswer = Math.floor(Math.random() * numOfAnswers + 1);\r\n\r\n    this.setState({ answer: possibleAnswers[randomAnswer] });\r\n  }\r\n\r\n  resetState() {\r\n    counter = 0;\r\n    this.setState({\r\n      question: \"\",\r\n      answer: null,\r\n      possibleAnswers: [generateAnswer(), generateAnswer(), generateAnswer()],\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let renderElements = \"\";\r\n    const {\r\n      handleOptionChange,\r\n      handleQuestionChange,\r\n      handleAddOption,\r\n      handleAnswer,\r\n      resetState,\r\n    } = this;\r\n    const { possibleAnswers, answer, question } = this.state; // object destructring\r\n\r\n    if (answer !== null) {\r\n      renderElements = (\r\n        <React.Fragment>\r\n          <div className=\"forms\">\r\n            <p>{question}</p>\r\n            <ul style={{ listStyle: \"upper-alpha\" }}>\r\n              {possibleAnswers.map((option /* {id, value} */) => {\r\n                return (\r\n                  <li\r\n                    key={option.id}\r\n                    style={{\r\n                      marginBottom: \"1rem\",\r\n                      color: answer.id === option.id ? \"red\" : \"currentColor\",\r\n                    }}\r\n                  >\r\n                    {option.value}\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n            <h4>\r\n              {\" \"}\r\n              I hope you can live with the consequences of your choice. Good\r\n              luck!\r\n            </h4>\r\n            <button onClick={resetState}>Ask new question</button>\r\n          </div>\r\n        </React.Fragment>\r\n      );\r\n    } else {\r\n      renderElements = (\r\n        <React.Fragment>\r\n          <div className=\"forms\">\r\n            <h3>Question</h3>\r\n            <input\r\n              placeholder=\"Q: Enter Any Question\"\r\n              onChange={(e) => handleQuestionChange(e.target.value)}\r\n            />\r\n\r\n            <h3>Options</h3>\r\n            {possibleAnswers.map((option, idx) => {\r\n              return (\r\n                <div style={{ marginBottom: \"1rem\" }} key={option.id}>\r\n                  <input\r\n                    placeholder={generateAlpha(idx) + \":\"}\r\n                    onChange={(e) => handleOptionChange(option, e.target.value)}\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n            <div className=\"buttons\">\r\n              <button onClick={handleAddOption}>\r\n                <strong> + </strong> Option\r\n              </button>\r\n              <button onClick={handleAnswer}>Answer</button>\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n\r\n    return renderElements;\r\n  }\r\n}\r\n\r\nexport default Application;\r\n","import React, { Component } from \"react\";\n\nimport Application from \"./Randomize.jsx\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"main\">\n        <header> RANDOMIZE! </header>\n        <p>\n          {\" \"}\n          We help you make those hard choices. All you have to do is supply the\n          question and we will pick from a list of choices you gave. Hopefully\n          we make the right decision...\n        </p>\n        <Application />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n//import Choices from \"./choiceMaker\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}